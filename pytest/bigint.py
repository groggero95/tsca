# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_bigint')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_bigint')
    _bigint = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bigint', [dirname(__file__)])
        except ImportError:
            import _bigint
            return _bigint
        try:
            _mod = imp.load_module('_bigint', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _bigint = swig_import_helper()
    del swig_import_helper
else:
    import _bigint
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def eq(first, second):
    return _bigint.eq(first, second)
eq = _bigint.eq

def df(first, second):
    return _bigint.df(first, second)
df = _bigint.df

def gt(first, second):
    return _bigint.gt(first, second)
gt = _bigint.gt

def ge(first, second):
    return _bigint.ge(first, second)
ge = _bigint.ge

def lt(first, second):
    return _bigint.lt(first, second)
lt = _bigint.lt

def le(first, second):
    return _bigint.le(first, second)
le = _bigint.le

def lsr(a, pl):
    return _bigint.lsr(a, pl)
lsr = _bigint.lsr

def lsl(a, pl):
    return _bigint.lsl(a, pl)
lsl = _bigint.lsl

def sum(a, b):
    return _bigint.sum(a, b)
sum = _bigint.sum

def sub(a, b):
    return _bigint.sub(a, b)
sub = _bigint.sub
class bigint_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bigint_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bigint_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numb"] = _bigint.bigint_t_numb_set
    __swig_getmethods__["numb"] = _bigint.bigint_t_numb_get
    if _newclass:
        numb = _swig_property(_bigint.bigint_t_numb_get, _bigint.bigint_t_numb_set)
    __swig_setmethods__["pos"] = _bigint.bigint_t_pos_set
    __swig_getmethods__["pos"] = _bigint.bigint_t_pos_get
    if _newclass:
        pos = _swig_property(_bigint.bigint_t_pos_get, _bigint.bigint_t_pos_set)

    def __init__(self):
        this = _bigint.new_bigint_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bigint.delete_bigint_t
    __del__ = lambda self: None
bigint_t_swigregister = _bigint.bigint_t_swigregister
bigint_t_swigregister(bigint_t)

# This file is compatible with both classic and new-style classes.


